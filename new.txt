import cv2
import numpy as np

def detect_and_label_rectangles(frame):
    # Convert to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Apply a binary threshold to get a binary image
    _, thresh = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY_INV)

    # Alternatively, you can use Canny edge detection
    # thresh = cv2.Canny(gray, 50, 150)

    # Find contours
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    rectangles = []
    for contour in contours:
        approx = cv2.approxPolyDP(contour, 0.02 * cv2.arcLength(contour, True), True)
        if len(approx) == 4:
            area = cv2.contourArea(approx)
            if area > 1000:
                rectangles.append(approx)

    # Sort rectangles by their top-left corner (row-wise order)
    def get_key(point):
        return point[0][1], point[0][0]  # Sort by y, then by x

    rectangles = sorted(rectangles, key=lambda rect: get_key(rect))

    # Draw and label rectangles
    for i, rect in enumerate(rectangles, start=1):
        cv2.drawContours(frame, [rect], 0, (0, 255, 0), 3)
        # Compute the center of the rectangle
        M = cv2.moments(rect)
        if M["m10"] != 0 and M["m01"] != 0:
            cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
            cv2.putText(frame, str(i), (cX, cY), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    return frame

# Open a connection to the camera
cap = cv2.VideoCapture(0)

# Check if the camera opened successfully
if not cap.isOpened():
    print("Error: Could not open camera.")
    exit()

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # If frame is read correctly, ret is True
    if not ret:
        print("Error: Failed to capture image.")
        break

    # Detect and label rectangles in the frame
    frame_with_rectangles = detect_and_label_rectangles(frame)

    # Display the resulting frame
    cv2.imshow('Detected Rectangles', frame_with_rectangles)

    # Break the loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# When everything is done, release the capture
cap.release()
cv2.destroyAllWindows()